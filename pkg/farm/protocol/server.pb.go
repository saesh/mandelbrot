// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientConfig struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Hostname             string   `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientConfig) Reset()         { *m = ClientConfig{} }
func (m *ClientConfig) String() string { return proto.CompactTextString(m) }
func (*ClientConfig) ProtoMessage()    {}
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_c85808bd7c5618e2, []int{0}
}
func (m *ClientConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientConfig.Unmarshal(m, b)
}
func (m *ClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientConfig.Marshal(b, m, deterministic)
}
func (dst *ClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConfig.Merge(dst, src)
}
func (m *ClientConfig) XXX_Size() int {
	return xxx_messageInfo_ClientConfig.Size(m)
}
func (m *ClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConfig proto.InternalMessageInfo

func (m *ClientConfig) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ClientConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ClientConfig) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_c85808bd7c5618e2, []int{1}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (dst *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(dst, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClientConfig)(nil), "protocol.ClientConfig")
	proto.RegisterType((*Void)(nil), "protocol.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MandelbrotClient is the client API for Mandelbrot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MandelbrotClient interface {
	Register(ctx context.Context, in *ClientConfig, opts ...grpc.CallOption) (*Void, error)
}

type mandelbrotClient struct {
	cc *grpc.ClientConn
}

func NewMandelbrotClient(cc *grpc.ClientConn) MandelbrotClient {
	return &mandelbrotClient{cc}
}

func (c *mandelbrotClient) Register(ctx context.Context, in *ClientConfig, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protocol.Mandelbrot/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MandelbrotServer is the server API for Mandelbrot service.
type MandelbrotServer interface {
	Register(context.Context, *ClientConfig) (*Void, error)
}

func RegisterMandelbrotServer(s *grpc.Server, srv MandelbrotServer) {
	s.RegisterService(&_Mandelbrot_serviceDesc, srv)
}

func _Mandelbrot_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MandelbrotServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Mandelbrot/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MandelbrotServer).Register(ctx, req.(*ClientConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mandelbrot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Mandelbrot",
	HandlerType: (*MandelbrotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Mandelbrot_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_server_c85808bd7c5618e2) }

var fileDescriptor_server_c85808bd7c5618e2 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39, 0x4a,
	0x7e, 0x5c, 0x3c, 0xce, 0x39, 0x99, 0xa9, 0x79, 0x25, 0xce, 0xf9, 0x79, 0x69, 0x99, 0xe9, 0x42,
	0x7c, 0x5c, 0x4c, 0x99, 0x05, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x4c, 0x99, 0x05, 0x42,
	0x42, 0x5c, 0x2c, 0x05, 0xf9, 0x45, 0x25, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x60, 0xb6,
	0x90, 0x14, 0x17, 0x47, 0x46, 0x7e, 0x71, 0x49, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0x33, 0x58, 0x25,
	0x9c, 0xaf, 0xc4, 0xc6, 0xc5, 0x12, 0x96, 0x9f, 0x99, 0x62, 0xe4, 0xc4, 0xc5, 0xe5, 0x9b, 0x98,
	0x97, 0x92, 0x9a, 0x93, 0x54, 0x94, 0x5f, 0x22, 0x64, 0xc2, 0xc5, 0x11, 0x94, 0x9a, 0x9e, 0x59,
	0x5c, 0x92, 0x5a, 0x24, 0x24, 0xa6, 0x07, 0xb3, 0x5c, 0x0f, 0xd9, 0x66, 0x29, 0x3e, 0x84, 0x38,
	0xc8, 0x04, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x80, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x23, 0xb0,
	0x41, 0x0a, 0xbc, 0x00, 0x00, 0x00,
}
