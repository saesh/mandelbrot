// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package node

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Hostname             string   `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_c86bd7e2ed9b5a09, []int{0}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (dst *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(dst, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RegisterRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RegisterRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type RenderConfiguration struct {
	MaxIterations        int32    `protobuf:"varint,1,opt,name=max_iterations,json=maxIterations,proto3" json:"max_iterations,omitempty"`
	ColorPreset          int32    `protobuf:"varint,2,opt,name=color_preset,json=colorPreset,proto3" json:"color_preset,omitempty"`
	X                    float32  `protobuf:"fixed32,3,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32  `protobuf:"fixed32,4,opt,name=y,proto3" json:"y,omitempty"`
	R                    float32  `protobuf:"fixed32,5,opt,name=r,proto3" json:"r,omitempty"`
	StartIndex           int32    `protobuf:"varint,6,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	EndIndex             int32    `protobuf:"varint,7,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
	Width                int32    `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32    `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenderConfiguration) Reset()         { *m = RenderConfiguration{} }
func (m *RenderConfiguration) String() string { return proto.CompactTextString(m) }
func (*RenderConfiguration) ProtoMessage()    {}
func (*RenderConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_c86bd7e2ed9b5a09, []int{1}
}
func (m *RenderConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenderConfiguration.Unmarshal(m, b)
}
func (m *RenderConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenderConfiguration.Marshal(b, m, deterministic)
}
func (dst *RenderConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderConfiguration.Merge(dst, src)
}
func (m *RenderConfiguration) XXX_Size() int {
	return xxx_messageInfo_RenderConfiguration.Size(m)
}
func (m *RenderConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_RenderConfiguration proto.InternalMessageInfo

func (m *RenderConfiguration) GetMaxIterations() int32 {
	if m != nil {
		return m.MaxIterations
	}
	return 0
}

func (m *RenderConfiguration) GetColorPreset() int32 {
	if m != nil {
		return m.ColorPreset
	}
	return 0
}

func (m *RenderConfiguration) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *RenderConfiguration) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *RenderConfiguration) GetR() float32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *RenderConfiguration) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *RenderConfiguration) GetEndIndex() int32 {
	if m != nil {
		return m.EndIndex
	}
	return 0
}

func (m *RenderConfiguration) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *RenderConfiguration) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Coordinate struct {
	Re                   float32  `protobuf:"fixed32,1,opt,name=re,proto3" json:"re,omitempty"`
	Im                   float32  `protobuf:"fixed32,2,opt,name=im,proto3" json:"im,omitempty"`
	Index                int32    `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Coordinate) Reset()         { *m = Coordinate{} }
func (m *Coordinate) String() string { return proto.CompactTextString(m) }
func (*Coordinate) ProtoMessage()    {}
func (*Coordinate) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_c86bd7e2ed9b5a09, []int{2}
}
func (m *Coordinate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Coordinate.Unmarshal(m, b)
}
func (m *Coordinate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Coordinate.Marshal(b, m, deterministic)
}
func (dst *Coordinate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coordinate.Merge(dst, src)
}
func (m *Coordinate) XXX_Size() int {
	return xxx_messageInfo_Coordinate.Size(m)
}
func (m *Coordinate) XXX_DiscardUnknown() {
	xxx_messageInfo_Coordinate.DiscardUnknown(m)
}

var xxx_messageInfo_Coordinate proto.InternalMessageInfo

func (m *Coordinate) GetRe() float32 {
	if m != nil {
		return m.Re
	}
	return 0
}

func (m *Coordinate) GetIm() float32 {
	if m != nil {
		return m.Im
	}
	return 0
}

func (m *Coordinate) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ComputeResult struct {
	Re                   float32  `protobuf:"fixed32,1,opt,name=re,proto3" json:"re,omitempty"`
	Im                   float32  `protobuf:"fixed32,2,opt,name=im,proto3" json:"im,omitempty"`
	Index                int32    `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Iteration            int32    `protobuf:"varint,4,opt,name=iteration,proto3" json:"iteration,omitempty"`
	IsMandelbrot         bool     `protobuf:"varint,5,opt,name=is_mandelbrot,json=isMandelbrot,proto3" json:"is_mandelbrot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeResult) Reset()         { *m = ComputeResult{} }
func (m *ComputeResult) String() string { return proto.CompactTextString(m) }
func (*ComputeResult) ProtoMessage()    {}
func (*ComputeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_c86bd7e2ed9b5a09, []int{3}
}
func (m *ComputeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeResult.Unmarshal(m, b)
}
func (m *ComputeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeResult.Marshal(b, m, deterministic)
}
func (dst *ComputeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeResult.Merge(dst, src)
}
func (m *ComputeResult) XXX_Size() int {
	return xxx_messageInfo_ComputeResult.Size(m)
}
func (m *ComputeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeResult.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeResult proto.InternalMessageInfo

func (m *ComputeResult) GetRe() float32 {
	if m != nil {
		return m.Re
	}
	return 0
}

func (m *ComputeResult) GetIm() float32 {
	if m != nil {
		return m.Im
	}
	return 0
}

func (m *ComputeResult) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ComputeResult) GetIteration() int32 {
	if m != nil {
		return m.Iteration
	}
	return 0
}

func (m *ComputeResult) GetIsMandelbrot() bool {
	if m != nil {
		return m.IsMandelbrot
	}
	return false
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_c86bd7e2ed9b5a09, []int{4}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (dst *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(dst, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "node.RegisterRequest")
	proto.RegisterType((*RenderConfiguration)(nil), "node.RenderConfiguration")
	proto.RegisterType((*Coordinate)(nil), "node.Coordinate")
	proto.RegisterType((*ComputeResult)(nil), "node.ComputeResult")
	proto.RegisterType((*Void)(nil), "node.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeadNodeClient is the client API for HeadNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeadNodeClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Void, error)
}

type headNodeClient struct {
	cc *grpc.ClientConn
}

func NewHeadNodeClient(cc *grpc.ClientConn) HeadNodeClient {
	return &headNodeClient{cc}
}

func (c *headNodeClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/node.HeadNode/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeadNodeServer is the server API for HeadNode service.
type HeadNodeServer interface {
	Register(context.Context, *RegisterRequest) (*Void, error)
}

func RegisterHeadNodeServer(s *grpc.Server, srv HeadNodeServer) {
	s.RegisterService(&_HeadNode_serviceDesc, srv)
}

func _HeadNode_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadNodeServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.HeadNode/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadNodeServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HeadNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.HeadNode",
	HandlerType: (*HeadNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _HeadNode_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// RenderNodeClient is the client API for RenderNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RenderNodeClient interface {
	Configure(ctx context.Context, in *RenderConfiguration, opts ...grpc.CallOption) (*Void, error)
	IsMandelbrot(ctx context.Context, in *Void, opts ...grpc.CallOption) (RenderNode_IsMandelbrotClient, error)
}

type renderNodeClient struct {
	cc *grpc.ClientConn
}

func NewRenderNodeClient(cc *grpc.ClientConn) RenderNodeClient {
	return &renderNodeClient{cc}
}

func (c *renderNodeClient) Configure(ctx context.Context, in *RenderConfiguration, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/node.RenderNode/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderNodeClient) IsMandelbrot(ctx context.Context, in *Void, opts ...grpc.CallOption) (RenderNode_IsMandelbrotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RenderNode_serviceDesc.Streams[0], "/node.RenderNode/IsMandelbrot", opts...)
	if err != nil {
		return nil, err
	}
	x := &renderNodeIsMandelbrotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RenderNode_IsMandelbrotClient interface {
	Recv() (*ComputeResult, error)
	grpc.ClientStream
}

type renderNodeIsMandelbrotClient struct {
	grpc.ClientStream
}

func (x *renderNodeIsMandelbrotClient) Recv() (*ComputeResult, error) {
	m := new(ComputeResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RenderNodeServer is the server API for RenderNode service.
type RenderNodeServer interface {
	Configure(context.Context, *RenderConfiguration) (*Void, error)
	IsMandelbrot(*Void, RenderNode_IsMandelbrotServer) error
}

func RegisterRenderNodeServer(s *grpc.Server, srv RenderNodeServer) {
	s.RegisterService(&_RenderNode_serviceDesc, srv)
}

func _RenderNode_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderNodeServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.RenderNode/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderNodeServer).Configure(ctx, req.(*RenderConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _RenderNode_IsMandelbrot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RenderNodeServer).IsMandelbrot(m, &renderNodeIsMandelbrotServer{stream})
}

type RenderNode_IsMandelbrotServer interface {
	Send(*ComputeResult) error
	grpc.ServerStream
}

type renderNodeIsMandelbrotServer struct {
	grpc.ServerStream
}

func (x *renderNodeIsMandelbrotServer) Send(m *ComputeResult) error {
	return x.ServerStream.SendMsg(m)
}

var _RenderNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.RenderNode",
	HandlerType: (*RenderNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _RenderNode_Configure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IsMandelbrot",
			Handler:       _RenderNode_IsMandelbrot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_node_c86bd7e2ed9b5a09) }

var fileDescriptor_node_c86bd7e2ed9b5a09 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x6f, 0xd3, 0x40,
	0x10, 0x85, 0x6b, 0x37, 0x0e, 0xf6, 0x34, 0x29, 0xd2, 0x14, 0xd0, 0x12, 0x90, 0x28, 0x46, 0x48,
	0x3d, 0x15, 0xd4, 0x72, 0xe3, 0x46, 0x2e, 0xe4, 0x00, 0x82, 0x3d, 0x70, 0x8d, 0xb6, 0xec, 0x90,
	0xac, 0x14, 0xef, 0x9a, 0xdd, 0x8d, 0xea, 0xfe, 0x03, 0xfe, 0x30, 0x77, 0xe4, 0xd9, 0xc6, 0x34,
	0x70, 0xeb, 0x6d, 0xde, 0x37, 0x9e, 0x19, 0xef, 0xd3, 0x03, 0xb0, 0x4e, 0xd3, 0x79, 0xeb, 0x5d,
	0x74, 0x38, 0xea, 0xeb, 0xfa, 0x2b, 0x3c, 0x94, 0xb4, 0x32, 0x21, 0x92, 0x97, 0xf4, 0x73, 0x4b,
	0x21, 0xe2, 0x31, 0xe4, 0xa6, 0x15, 0xd9, 0x69, 0x76, 0x56, 0xc9, 0xdc, 0xb4, 0x88, 0x30, 0x6a,
	0x9d, 0x8f, 0x22, 0x3f, 0xcd, 0xce, 0x0a, 0xc9, 0x35, 0xce, 0xa0, 0x5c, 0xbb, 0x10, 0xad, 0x6a,
	0x48, 0x1c, 0xf2, 0x97, 0x83, 0xae, 0x7f, 0x67, 0x70, 0x22, 0xc9, 0x6a, 0xf2, 0x73, 0x67, 0x7f,
	0x98, 0xd5, 0xd6, 0xab, 0x68, 0x9c, 0xc5, 0xd7, 0x70, 0xdc, 0xa8, 0x6e, 0x69, 0x22, 0x25, 0x10,
	0xf8, 0x46, 0x21, 0xa7, 0x8d, 0xea, 0x16, 0x03, 0xc4, 0x97, 0x30, 0xf9, 0xee, 0x36, 0xce, 0x2f,
	0x5b, 0x4f, 0x81, 0x76, 0x67, 0x8f, 0x98, 0x7d, 0x61, 0x84, 0x13, 0xc8, 0x3a, 0x3e, 0x9b, 0xcb,
	0xac, 0xeb, 0xd5, 0x8d, 0x18, 0x25, 0x75, 0xd3, 0x2b, 0x2f, 0x8a, 0xa4, 0x3c, 0xbe, 0x80, 0xa3,
	0x10, 0x95, 0x8f, 0x4b, 0x63, 0x35, 0x75, 0x62, 0xcc, 0xbb, 0x80, 0xd1, 0xa2, 0x27, 0xf8, 0x0c,
	0x2a, 0xb2, 0xfa, 0xb6, 0xfd, 0x80, 0xdb, 0x25, 0x59, 0x9d, 0x9a, 0x8f, 0xa0, 0xb8, 0x36, 0x3a,
	0xae, 0x45, 0xc9, 0x8d, 0x24, 0xf0, 0x09, 0x8c, 0xd7, 0x64, 0x56, 0xeb, 0x28, 0x2a, 0xc6, 0xb7,
	0xaa, 0xfe, 0x00, 0x30, 0x77, 0xce, 0x6b, 0x63, 0x55, 0xa4, 0xde, 0x45, 0x4f, 0xfc, 0xc2, 0x5c,
	0xe6, 0x9e, 0xb5, 0x69, 0xf8, 0x31, 0xb9, 0xcc, 0x4d, 0xd3, 0xef, 0x4e, 0x47, 0x0f, 0xd3, 0x6e,
	0x16, 0xf5, 0xaf, 0x0c, 0xa6, 0x73, 0xd7, 0xb4, 0xdb, 0x48, 0x92, 0xc2, 0x76, 0x13, 0xef, 0xb7,
	0x07, 0x9f, 0x43, 0x35, 0xf8, 0xcc, 0xde, 0x14, 0xf2, 0x2f, 0xc0, 0x57, 0x30, 0x35, 0x61, 0xd9,
	0x28, 0xab, 0x69, 0x73, 0xe5, 0x5d, 0x64, 0xbf, 0x4a, 0x39, 0x31, 0xe1, 0xd3, 0xc0, 0xea, 0x31,
	0x8c, 0xbe, 0x39, 0xa3, 0x2f, 0xde, 0x43, 0xf9, 0x91, 0x94, 0xfe, 0xec, 0x34, 0xe1, 0x1b, 0x28,
	0x77, 0x69, 0xc1, 0xc7, 0xe7, 0x1c, 0xa6, 0x7f, 0xd2, 0x33, 0x83, 0x84, 0xfb, 0xd1, 0xfa, 0xe0,
	0xe2, 0x1a, 0x20, 0x45, 0x81, 0xc7, 0xdf, 0x41, 0xb5, 0x8b, 0x04, 0xe1, 0xd3, 0xdd, 0xfc, 0x7f,
	0x49, 0xd9, 0xdf, 0x81, 0x97, 0x30, 0x59, 0xdc, 0xf9, 0x31, 0xbc, 0xd3, 0x9d, 0x9d, 0xa4, 0x7a,
	0xcf, 0xb2, 0xfa, 0xe0, 0x6d, 0x76, 0x35, 0xe6, 0x90, 0x5f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xb0, 0x2d, 0x09, 0x55, 0xf2, 0x02, 0x00, 0x00,
}
